// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_TEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace Test {

struct Obj;
struct ObjBuilder;

struct Root;
struct RootBuilder;

struct Obj FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_U32 = 4,
    VT_DOUBLE_ARRAY = 6
  };
  uint32_t u32() const {
    return GetField<uint32_t>(VT_U32, 0);
  }
  const ::flatbuffers::Vector<double> *double_array() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_DOUBLE_ARRAY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_U32, 4) &&
           VerifyOffset(verifier, VT_DOUBLE_ARRAY) &&
           verifier.VerifyVector(double_array()) &&
           verifier.EndTable();
  }
};

struct ObjBuilder {
  typedef Obj Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_u32(uint32_t u32) {
    fbb_.AddElement<uint32_t>(Obj::VT_U32, u32, 0);
  }
  void add_double_array(::flatbuffers::Offset<::flatbuffers::Vector<double>> double_array) {
    fbb_.AddOffset(Obj::VT_DOUBLE_ARRAY, double_array);
  }
  explicit ObjBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Obj> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Obj>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Obj> CreateObj(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t u32 = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> double_array = 0) {
  ObjBuilder builder_(_fbb);
  builder_.add_double_array(double_array);
  builder_.add_u32(u32);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Obj> CreateObjDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t u32 = 0,
    const std::vector<double> *double_array = nullptr) {
  auto double_array__ = double_array ? _fbb.CreateVector<double>(*double_array) : 0;
  return Test::CreateObj(
      _fbb,
      u32,
      double_array__);
}

struct Root FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RootBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ARRAY = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Test::Obj>> *array() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Test::Obj>> *>(VT_ARRAY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ARRAY) &&
           verifier.VerifyVector(array()) &&
           verifier.VerifyVectorOfTables(array()) &&
           verifier.EndTable();
  }
};

struct RootBuilder {
  typedef Root Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_array(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Test::Obj>>> array) {
    fbb_.AddOffset(Root::VT_ARRAY, array);
  }
  explicit RootBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Root> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Root>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Root> CreateRoot(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Test::Obj>>> array = 0) {
  RootBuilder builder_(_fbb);
  builder_.add_array(array);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Root> CreateRootDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Test::Obj>> *array = nullptr) {
  auto array__ = array ? _fbb.CreateVector<::flatbuffers::Offset<Test::Obj>>(*array) : 0;
  return Test::CreateRoot(
      _fbb,
      array__);
}

inline const Test::Root *GetRoot(const void *buf) {
  return ::flatbuffers::GetRoot<Test::Root>(buf);
}

inline const Test::Root *GetSizePrefixedRoot(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Test::Root>(buf);
}

inline bool VerifyRootBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Test::Root>(nullptr);
}

inline bool VerifySizePrefixedRootBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Test::Root>(nullptr);
}

inline void FinishRootBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Test::Root> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRootBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Test::Root> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Test

#endif  // FLATBUFFERS_GENERATED_TEST_TEST_H_
